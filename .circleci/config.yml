version: 2

# Defining default values for all jobs
defaults: &defaults
  docker:
    - image: circleci/node:latest

ta_defaults: &ta_defaults
  docker:
    - image: circleci/openjdk:8-jdk-browsers

jobs:
  setup_dx:
    # This command runs the preparation steps needed for the CI workflow:
    #
    # - Installation of the Salesforce CLI using npm
    # - Authentication of the DevHub
    # - Creation of a scratch org
    #
    # While a scratch org isn't needed in all steps it's still part of the process. The reason for this is
    # that we need to store the sfdx configuration files for it in the workspace, so that data can be shared
    # across different workflow steps.
    #
    # Keep it simple!
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Salesforce DX
          command: . build/install_sfdx.sh
      
      - run:
          name: Authenticate DevHub
          command: . build/authenticate_devhub.sh
              
      - run:
          name: Define CI Org
          # We define the to be used CI org. Based on the branch we either create a new scratch org
          # or we use a project variable to authenticate a UAT or full-copy sandbox as target org.
          #
          # You can get the sfdxurl via sfdx force:org:display -u yourOrg --json --verbose from your local machine.
          command: |
              echo $SFDX_AUTH_PACKAGING > ~/auth.url
              node_modules/sfdx-cli/bin/run force:auth:sfdxurl:store -s -a packagingorg -f ~/auth.url
              . build/create_scratch_org.sh

      - persist_to_workspace:
          # This is an important step. If we don't store the project data (cloned GitHub source and node_modules from the CLI installation)
          # we'd have to re-run installation for every workflow step.
          #
          # Also this step is crucial as we use it to share sfdx config parameters between steps.
          root: ~/
          paths:
              - .sfdx/*
              - project/*
  
  deploy_source:
  # This deploys the source to the ci scratch org.
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Push Source
          command: . build/deploy_source.sh
          # command: echo "Faking deploy source..."
             
  
  create_and_test_package:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create and install package
          command: |
            if [[ $SFDX_TEST_PACKAGING == "true" ]]; then
              . build/packagingDeployment.sh
            fi
          no_output_timeout: 15m

  run_apex_tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run Apex Tests
          command: . build/run_apex_test.sh
  
  cleanup_scratch_org:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Clean Up
          command: . build/delete_scratch_org.sh

  setup_testautomation:
    
    <<: *ta_defaults

    steps:
      - checkout

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: Cucumber_Selenium_CI_App-{{ checksum "pom.xml" }}
      
      # gets the project dependencies
      - run: mvn dependency:go-offline 
      
      # set up chrome driver
      - run: . build/setup_chrome_driver.sh

      # install chrome 
      - run: . build/install_chrome.sh

      # Set up virtual display
      # On CI server, there is no display output for the browser to launch in. To run the tests on a browser loaded in CI server, we need to configure 
      # your tests to launch the browser virtually. X virtual framebuffer is an in-memory display server for UNIX-like operating system (e.g., Linux). 
      # It enables you to run graphical applications without a display (e.g., browser tests on a CI server) while also having the ability to take screenshots.
      - run: . build/setup_virtualframebuffer.sh
      
      # Insall jq
      # - run: 
      #     name: Install jq
      #     command: sudo apt-get update && sudo apt-get install jq

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: Cucumber_Selenium_CI_App-{{ checksum "pom.xml" }}
      
      # set up scratch org for automation tests
      # - run:
      #     name: Setup test org
      #     command: |
      #       if [[ $USE_SCRATCH_ORG_FOR_TA == "true" ]]; then
      #         . build/setup_scratchorgforta.sh
      #       fi
      
      - run: . build/retrieve_testorglogin.sh

      - run: mvn clean # run the actual tests

      - run: mvn install # run the actual tests
      
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      
      - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          #path: target/demo-cucumber-mvn-sfdc-0.0.1-SNAPSHOT.jar
          path: target/htmlreports
      
      - store_artifacts: # store the uberjar as an artifact
      # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          #path: target/demo-cucumber-mvn-sfdc-0.0.1-SNAPSHOT.jar
          path: target/surefire-reports

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup_dx
      - deploy_source:
          requires:
            - setup_dx
          filters:
            branches:
              ignore: master
      - create_and_test_package:
          requires:
            - setup_dx
          filters:
            branches:
              only: master
      - run_apex_tests:
          requires:
            - deploy_source
          filters:
            branches:
              ignore: master
      - cleanup_scratch_org:
          requires:
            - setup_dx
            - deploy_source
            - create_and_test_package
            - run_apex_tests
      - setup_testautomation:
          requires:
            - setup_dx
            - deploy_source